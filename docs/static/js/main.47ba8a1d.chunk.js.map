{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPlatform","osString","navigator","appVersion","os","link","includes","DownloadLink","osInfo","operatingSystem","className","href","deb","rpm","target","rel","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","id","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,8KCI3C,SAASC,IACP,IAAMC,EAAWC,UAAUC,WACvBC,EAAK,KAAMC,EAAO,8DAKtB,OAJIJ,EAASK,SAAS,QAASF,EAAK,UAAWC,EAAO,6FAC7CJ,EAASK,SAAS,QAASF,EAAK,QAASC,EAAO,uFAChDJ,EAASK,SAAS,WAAWF,EAAK,QAASC,EAAO,CAAC,IAAO,sFAAuF,IAAO,wFAE1J,CAAC,gBAAmBD,EAAI,KAAQC,GAGzC,SAASE,IACP,IAAMC,EAASR,IACf,MAA+B,UAA3BQ,EAAOC,gBAGP,oCACE,uBAAGC,UAAU,WAAWC,KAAMH,EAAOH,KAAKO,KAA1C,wBAGA,uBAAGF,UAAU,WAAWC,KAAMH,EAAOH,KAAKQ,KAA1C,yBAKgC,OAA3BL,EAAOC,gBAGd,uBAAGC,UAAU,wBAAb,iCAIA,uBACEA,UAAU,WACVC,KAAMH,EAAOH,KACbS,OAAO,SACPC,IAAI,uBAJN,gBAMgBP,EAAOC,iBAqBdO,MAff,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKO,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SACzC,0CACA,2EACA,kBAACZ,EAAD,MACA,2BAAIP,IAAW,8BAA4BA,IAAcS,gBAA1C,MAAgE,KAAM,uBAAGE,KAAK,+DAAR,uBAEvF,yBAAKD,UAAU,aAAaO,IAAI,4BAA4BE,IAAI,wBC7ClDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAKjB,UAAU,QAAf,gBAAmC,uBAAGkB,GAAG,aAAajB,KAAK,sBAAxB,mBACnC,kBAAC,EAAD,OAEFkB,SAASC,eAAe,SDwHpB,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47ba8a1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7ba5514.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction getPlatform() {\r\n  const osString = navigator.appVersion\r\n  let os = null, link = \"https://github.com/julianmarmier/filemaster/releases/latest\"\r\n  if (osString.includes(\"Win\")) {os = \"Windows\"; link = \"https://github.com/julianmarmier/filemaster/releases/latest/download/filemaster.setup.exe\"}\r\n  else if (osString.includes(\"Mac\")) {os = \"macOS\"; link = \"https://github.com/julianmarmier/filemaster/releases/latest/download/filemaster.dmg\"}\r\n  else if (osString.includes(\"Linux\")) {os = \"Linux\"; link = {\"deb\": \"https://github.com/julianmarmier/filemaster/releases/latest/download/filemaster.deb\", \"rpm\": \"https://github.com/julianmarmier/filemaster/releases/latest/download/filemaster.rpm\"}}\r\n\r\n  return {\"operatingSystem\": os, \"link\": link}\r\n}\r\n\r\nfunction DownloadLink() {\r\n  const osInfo = getPlatform()\r\n  if (osInfo.operatingSystem === \"Linux\") {\r\n    // two links\r\n    return (\r\n      <>\r\n        <a className=\"App-link\" href={osInfo.link.deb}>\r\n          Download deb package\r\n        </a>\r\n        <a className=\"App-link\" href={osInfo.link.rpm}> \r\n          Download rpm package\r\n        </a>\r\n      </>\r\n    )\r\n  } else if (osInfo.operatingSystem === null) {\r\n    // not available for your platform\r\n    return (\r\n      <a className=\"App-link unavailable\">Unavailable for your platform</a>\r\n    )\r\n  } else {\r\n    return (\r\n      <a \r\n        className=\"App-link\"\r\n        href={osInfo.link}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Download for {osInfo.operatingSystem}  \r\n      </a>\r\n    )\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>filemaster</h1>\r\n        <h2>The missing file manager for your computer.</h2>\r\n        <DownloadLink />\r\n        <p>{getPlatform() ? `Not downloading for ${getPlatform().operatingSystem}? ` : null }<a href=\"https://github.com/julianmarmier/filemaster/releases/latest\" >See all releases.</a></p>\r\n      </header>\r\n      <img className=\"screenshot\" src=\"filemaster-screenshot.png\" alt=\"screenshot of app\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"name\">A project by <a id=\"small-link\" href=\"https://julianm.tk\">Julian Marmier</a></div>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}